# -*- coding: utf-8 -*-
"""Python Lecture 4. Parsing & SEC Example

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tJHOWjK9DhMHQasMatzC9fo1kPeirwb-

# Python Lecture 4. Parsing & SEC Example

1. Splitting with "Split" function
2. Regular Expression
3. SEC Example

## Part 1. Splitting with "Split" function

#### Example1
"""

# Using split to split a string, generating a "list", delimiter is an empty space ' '
# Split function: Argument will be the 'delimiter;

fullName = 'John Jr Dow'

resultOfSplit = fullName.split(' ')

print(resultOfSplit)

# Using split to split a string, generating a "list", delimiter is an underscore '_'

fullName = 'John_Jr_Dow'

resultOfSplit = fullName.split('_')

print(resultOfSplit)

# Using split to split a string, and using the "list"

fullName = 'John Jr Dow'
resultOfSplit = fullName.split(' ')
# resultOfSplit = ['John', 'Jr', 'Dow']

firstName = fullName.split(' ')[0]
lastName = fullName.split(' ')[-1]

print("First Name:", firstName)
print("Last Name:", lastName)

# Example of using "split", with the for-loop


fullName = 'John Jr Dow'
nameList = fullName.split(' ')
# nameList = ['John', 'Jr', 'Dow']

# Method 1: Using the number of elements directly

print(nameList)

for i in range(0, 3):
  print('Name ',i+1,' :',  nameList[i])

# Method 2: Using the length function, replacing the static value of "3"

print(len(nameList))

for i in range(0, len(nameList)):
  print('Name ',i+1,' :',  nameList[i])

# Method 3: Using the "enumerate" keyword
## Most convenient

for name in nameList:
  print('Name:',  name)


for i, name in enumerate(nameList):
  print('Name ',i+1,' :',  name)

"""## Part 2. Regular Expression

### 2-1. Regex vs Split



"""

# Using "re" module - no need to install (included in base package)

import re

"""#### Example2"""

import re

string = 'asdfasfasdfasdff <table>This is table Contents</table>asdfas;d'

regStr = '<table>(.*?)</table>'


re.findall(regStr, string, re.DOTALL)

"""### Example2 in Detail


*   Objective: Finding the table contents, between a \<table> and \</table> tags.


*   Given Text: 'asdfasfasdfasdff \<table> This is table Contents \</table> asdfas;d'

*   What we want to find as result: "This is table Contents"



"""

# Method 1: Use 'split' function multiple(2) times


textToFind = 'asdfasfasdfasdff <table> This is table Contents </table> asdfas;d'

print("Initial Data:\n\t", textToFind)
tmpString1 = textToFind.split('<table>')[1]
print("First Stage Result:\n\t", tmpString1)
tmpString2 = tmpString1.split('</table>')[0]
print("Second Stage Result:\n\t", tmpString2)

# Method 2: Using regular expression
# All you have to write is the "pattern"

textToFind = 'asdfasfasdfasdff <table> This is table Contents </table>;d'

pattern = '.*?<table>(.*?)</table>'
result = re.findall(pattern, textToFind, re.DOTALL)
print("RE Result:", result[0])

# Benefits of using regular expression vs split
# And you can reuse the "pattern"

textToFind = 'asdfasfasdfasdff <table> This is table Contents 1</table> asdfas;dasdfasfasdfasdff <table> This is table Contents2 </table> asdfas;dsdfasfasdfasdff <table> This is table Contents3 </table> asdfas;dsdfasfasdfasdff <table> This is table Contents4 </table> asdfas;d'


print("Initial Data:", textToFind)

pattern = '.*?<table>(.*?)</table>.*?'
result = re.findall( pattern, textToFind, re.DOTALL)
print("RE Result:", result)

"""### 2-2 Regex Other Examples


#### Parsing Dates

- Special  sequences
  - \d: digit
  - \D:  non-digit
"""

textToFind = "asdfasdfasdfasdf asdfasdfasdf Jan-09-2020 asdf Feb-12-1990 asdfasdfasdf"
pattern = "(\D\D\D-\d\d-\d\d\d\d)"

result = re.findall(pattern, textToFind, re.DOTALL)
print(result)

"""#### Parsing Emails (Sort of)

- Special  sequences
  - \d: digit
  - \D:  non-digit
"""

textToFind = " asdfasdfasd a23123kjh1j2312_asdf@aasdfasd.com kjhgkjhgkjh asd098as0dfa@asdf.net ihjgkjhkjh asdfa134@nwer.net "

pattern = "\D[\w_]*@\D[\w]*\.\D\D\D"


result = re.findall(pattern, textToFind, re.DOTALL)
print(result)

"""### 2-3. Regex with Online Tools

Hint: Use a Tester service

Ex)  https://pythex.org/



Google Example


view-source:https://www.sec.gov/Archives/edgar/data/1288776/000165204416000012/googexhibit2101q42015.htm
"""

textToFind = '<table> T'

pattern = '<table>(.*)'


result = re.findall(   pattern, textToFind, re.DOTALL)

print(result)

textToFind = 'asdfasfasdfasdff <table> T1 </table> <table> T2 </table>'

pattern = '<table>(.*)</table>'


result = re.findall(   pattern, textToFind, re.DOTALL)

print(result)

textToFind = 'asdfasfasdfasdff <table> T1 </table> <table> T2 </table>'

pattern = '<table>(.*?)</table>'


result = re.findall(   pattern, textToFind, re.DOTALL)

print(result)

"""HTML :

view-source:https://www.sec.gov/Archives/edgar/data/1288776/000165204416000012/googexhibit2101q42015.htm


Example:

.\*?\<head>(.\*?)\</head>.\*?

https://pythex.org/

## 3. SEC Example
### 3-1. Question

#### Search Microsoft at the following link
  - https://www.sec.gov/edgar/searchedgar/companysearch.html

#### In the following page, find the 10-K and click filing
  - https://www.sec.gov/edgar/browse/?CIK=789019&owner=exclude

#### Find the EXHIBIT 21 URL in the follwing 10-K filing
  - https://www.sec.gov/Archives/edgar/data/789019/000156459021039151/0001564590-21-039151-index.htm

#### Final URL for the EXHIBIT 21
  - https://www.sec.gov/Archives/edgar/data/789019/000156459021039151/msft-ex21_10.htm

### 3-2. Now, use regex to parse out the subsidiary information from EXHIBIT 21
  - Using pythex.org

"""

import urllib.request

msft2021Ex21Url = "https://www.sec.gov/Archives/edgar/data/789019/000156459021039151/msft-ex21_10.htm"

req = urllib.request.Request(msft2021Ex21Url, headers={'User-Agent': 'Company Name myname@gmail.com'})
data =urllib.request.urlopen(req, timeout=10).read().decode('utf-8')


regStr = "<tr>[^<]*<td[^<]*>[^<]*<p[^<]*>([^<]*)</p></td>[^<]*<td[^<]*>[^<]*<p[^<]*>[^<]*</p></td>[^<]*<td[^<]*>[^<]*<p[^<]*>([^<]*)</p></td>[^<]*</tr>"

result = re.findall(regStr, data, re.DOTALL)
for res in result:
  print('\t'.join(res))

from google.colab import files
uploaded = files.upload()

regStr = "<tr>[^<]*<td[^<]*>[^<]*<p[^<]*>([^<]*)</p></td>[^<]*<td[^<]*>[^<]*<p[^<]*>[^<]*</p></td>[^<]*<td[^<]*>[^<]*<p[^<]*>([^<]*)</p></td>[^<]*</tr>"

result = re.findall(regStr, data, re.DOTALL)
for res in result:
  print('\t'.join(res))
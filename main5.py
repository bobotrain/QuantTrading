# -*- coding: utf-8 -*-
"""Python Lecture 5. Pandas Essentials

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Voyg1QcZOLJG7PqK1dsQPTzhuwsmPsN

# Python Lecture 5. Pandas Essentials

1. List vs Dictionary
2. Import/Exporting Pandas to/from CSV file
3. Pandas Dataframe
4. Dataframe Columns
5. Adding a new column -  Dollar Volume
6. Preparation for Merging
7. Merging Dataframes - Calculating the Market Cap
8. Plots

## Part 1. List vs Dictionary
"""

# List Method: Print Class Id for Each Name
# You have to remember the index to use a list

listOfNames = ['jess', 'james', 'brian', 'john']

listOfNames[1]

#List Method: Print Class Id for Each Name

listOfNamesWithClassId = [['jess', 1324], ['james', 1351], ['brian', 1551], ['john', 1882]]

for nameData in listOfNamesWithClassId:
  name, classId = nameData
  print("Name is ", name, " and ClassID is ", classId)

# List method: Name + Class ID + Age
# You may run into problems!

listOfNamesWithClassId = [['jess', 1324, 25], ['james', 1351, 25], ['brian',25,  1551], ['john', 1882, 25]]


for nameData in listOfNamesWithClassId:
  name, classId, age = nameData
  print("Name is ", name, " and ClassID is ", classId, "and Age is ", age)

#Dictionary Method: Print Class Id for Each Name

dictionaryOfStudentData = {'jess':{'classId':1324}, 'james': {'classId':1351}, 'brian': {'classId':1551}, 'john':{'classId':1882}}

# Dictionary Usage #1

dictionaryOfStudentData['brian']

# Dictionary Usage #2

dictionaryOfStudentData['brian']['classId']

# Dictionary Usage #3

for name in dictionaryOfStudentData:
  print("Name is ", name, " and ClassID is ", dictionaryOfStudentData[name]['classId'])

# Another example
#Dictionary Method: Class Id, and Age for Each Name

dictionaryOfStudentData = {'jess':{'classId':1324, 'age': 27}, 'james': {'classId':1351, 'age': 25}, 'brian': {'age': 25, 'classId':1551}, 'john':{'classId':1882, 'age': 25}}

# Dictionary Usage Again #1

dictionaryOfStudentData['brian']

# Dictionary Usage Again #2

dictionaryOfStudentData['brian']['age']

# Dictionary Usage Again #3

dictionaryOfStudentData['brian']['classId']

# Dictionary Usage Again #4

for name in dictionaryOfStudentData:
  print("Name is ", name, " and ClassID is ", dictionaryOfStudentData[name]['classId'], " and Age is ", dictionaryOfStudentData[name]['age'])

"""
## Part 2. Import/Exporting Pandas to/from CSV file
"""





# Import pandas

import pandas as pd

# Import csv file into pandas dataframe



data2 = pd.read_csv("stockReturnDF3.csv")

# Method 1 for uploading file

## Use the 'upload button' on left folder pane

# Method 2 for uploading file

from google.colab import files
files.upload()

"""First let's check if the file has been uploaded

"""

# Method 1 to check whether file has been uploaded

# Open left 'folder' pane

# Method 2 to check whether file has been uploaded

!ls

# Hint: If there is something wrong with the data,
# make sure you check the filename is correct.
# (The files are not overwritten!)

# Delete

# Method 1 - Use left folder pane

# Delete all CSV files in current directory
# !rm ./*.csv

"""Now let's re-run the pandas loading method, which converts the csv file into a pandas datatype

"""

# Load To CSV
stockDF = pd.read_csv("stockReturnDF2.csv")

# Problem with using print statement on dataframes - readability!

print(stockDF)

# Versus using 'head' function on dataframes

stockDF.head()

"""Data to/from CSV"""

# Dataframe: Loading and Saving from/to CSV files

# Load from CSV
# stockDF = pd.read_csv("stockReturnDF3.csv")


# Save to CSV
stockDF.to_csv("stockReturnDF_backup.csv")

!ls

"""## Part 3. Pandas Dataframe

To view the contents of the uploaded csv *file*,
- which has been loaded into a pandas datatype (called 'dataframe')...

We will run the 'head' method of a pandas dataframe

"""

# Again, issues with using 'print' statement with dataframes

print(stockDF)

# Head function, without arguments.

stockDF.head()

# Head function with arguments: 10

stockDF.head(10)

# Tail function without arguments

stockDF.tail()

# Tail function with arguments: 10

stockDF.tail(10)

"""## Part 4. Dataframe Columns

"""

stockDF

# Using a single column from a dataframe

stockDF['close']

stockDF['ticker']

"""## Part 5. Adding a new column
- Empty Column
- Dollar Volume Column


"""

# Adding an empty text column

stockDF['emptyTextColumn'] = ''

# Adding an empty numerical column
stockDF['emptyNumericalColumn'] = 0

stockDF.head()

# Adding a column, and calculate "Dollar Volume"

stockDF['dollarVolume'] = stockDF['close'] * stockDF['volume']

stockDF.head()

"""## Part 6. Preparation for Merging

"""

from google.colab import files
files.upload()

# Import shareoutstanding CSV file into a New dataframe

shareOutDataFrame = pd.read_csv("ShareOutstanding.csv")

shareOutDataFrame.head( )

"""## Part 7. Merging Dataframes - Getting Market Cap"""

stockDF.head()

stockDF.tail()

# Merge "stock return" dataframe with "share outstanding" dataframe
# - using "ticker" as the key for merging

mergedDf = stockDF.merge(shareOutDataFrame, on='ticker')

mergedDf.head()

mergedDf.tail()

# Calculate market cap, from the merged dataframe

mergedDf['marketCap'] = mergedDf['adjusted close'] * mergedDf['sharesOutstanding']

mergedDf.head()

mergedDf.tail()

# Backup


mergedDf.to_csv("mergedDf_backup.csv")

"""## 8. Plot"""

mergedDf.plot()

# Step 1
# - Plot only meaningful variables

mergedDf['marketCap'].plot()

# Step 2
# - As is, the current plot is a mixture of different stock tickers
# - We need to plot a separate diagram for each ticker